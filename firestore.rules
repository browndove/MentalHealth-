
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user has a specific role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check ownership of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read their own profile, counselors can read student profiles.
    match /users/{userId} {
      allow read: if request.auth != null && (isOwner(userId) || isRole('counselor'));
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
    }
    
    // Students can create appointments. Counselors can read/update their assigned appointments.
    match /appointments/{appointmentId} {
        allow read: if request.auth != null && 
                    (isOwner(resource.data.studentId) || 
                     (isRole('counselor') && resource.data.counselorId == request.auth.uid));
        
        allow create: if request.auth != null && isOwner(request.resource.data.studentId);
        
        allow update: if request.auth != null && 
                      (isRole('counselor') && resource.data.counselorId == request.auth.uid);
    }

    // Conversations are private to the user who created them.
    match /conversations/{conversationId} {
      allow read, create, update, delete: if request.auth != null && isOwner(resource.data.userId);
    }

    // Deny all other operations by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
